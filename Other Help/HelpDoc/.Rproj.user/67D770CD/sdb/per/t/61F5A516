{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Useful Tips and Commands\"\nauthor: \"Lukas Arnroth\"\ndate: \"4 januari 2018\"\noutput: pdf_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\nIn this document some useful tricks and commands will be considered, these are commands that I use most of the time and they tend to ease the process of working with R.\n\n\\section{Introduction to R}\nR is an open source statistical software, based on the functional programming language S, developed and maintained by Cran. It consists of base functions that comes with installation and user written packages. It does put much responsibility on the user in the sense that many functions that you use are written by users. You should always consult the package documentation on the Cran website when using a new package that you are unfamiliar with.  \n\n\\section{General Tips}\n\\subsection{Work in a R Project}\nAlways work in a R project! R will automatically look for files in your project directory, rather than you having to specify the paths to all the files you want to read in. Furthermore R will automatically save plots to your project directory. You can see the files in your directory under the Files tab in the lower right hand side of the R studio window. \n\nSo when you start a new assignment do the following:\n\\begin{itemize}\n\\item Choose a folder for your repository (R project)\n\\item In the R studio window go to File / New Project. Then click New Directory and then Empty Project. Once this is done, chose the location for where R will create a repository. Name the project and create.\n\\item You should now have a folder containing a .Rproj file. Put all the code and data files associated with the assignment in this folder. \n\\end{itemize}\n\nWhenever you want to open R to continue with you assignment, always open the .Rproj, rather than just opening R studios. R will have saved your global environment (something referred to as an image) and you're good to go.\n\n\\subsection{Read like R}\nBefore it becomes second nature, try to make a habit of reading your code like R does. This is done from inside out and starting on the right side of assignment. Lets look at an example\n\n```{r, message= F, warning= F}\nx <- c(1,4,6,7)\n```\n\nThis you would read as, starting on the right side, take values 1,4,6,7 and concatonate into a vector (read from inside out). Then take this object and assign it to x in the global environment. What about\n\n```{r, message= F, warning= F}\nmean(x*10)\n```\n\nSo starting from inside out, take the vector x and multiply all elements in x by 10. Once this is done move outside the paranthesis and take mean. Try reading the operation below for yourself:\n\n```{r, message= F, warning= F}\nvar(c(mean(x*10), 6.5))\n```\n\n\\subsection{Structure of Functions in R}\nFor those of you not familiar with programming at all, R is a scripted functional language. You don't need to pay much attention at all as to what this means exactly, but know that everything you use in R is a function written by other people. Functions takes arguments, some necessary and some optional, and performs a task. You can use the documentation to understand what a function does. This is done by writing ? followed by the function name. In the description you find what the function(s) does. In the usage you find the parameters the function takes. If a parameter is followed by an equal sign, it means that it has a default value or setting and you don't have to supply this parameter with any object for the function to work. Parameters without any equality sign needs to be assigned an object to work. What type of objects you assign to the parameters is specified in the arguments section. \n\nNote that if you don't use the parameter names in your own usage of the function (for example mean(object) vs. mean(x = object)) you need to supply the arguments in the same order as in the usage section of the help documentation. \n\nIf you're uncertain of how a function works and what is it's intent you should consult the examples in the bottom of the help documentation.\n\n\\subsection{Write Readable Code}\nTry to make your code as readable as possible! I often seperate sections of code by using the comment symbol aswell. Keep the code spacious and comment on what you are doing, for your own sakes. Here's an example of how I usually seperate my code into sections\n\n```{r, message= F, warning= F, results=\"hide\", fig.show=\"hide\"}\n######################\n####### TASK 1 #######\n######################\n\n### A) Generate 100 randomstandard normals and get mean\n\n# get 100 standard normals\nx <- rnorm(100)\n# calculate the mean\nmean(x)\n\n### B) Use the same values and get the variance\n\n# calculate the variance\nvar(x)\n\n######################\n####### TASK 2 #######\n######################\n\n### A) Display the results as a histogram\n\n# Show x as histogram\nhist(x)\n```\n\n\n\\subsection{Google}\nYou need to learn how to google problems that you encounter. Someone has had your problem before. One online resource which should become your best friend is stackoverflow. Just type in your problem and add stackoverflow or stack at the end of your search. You will pretty much be guaranteed to find working solutions. Just make sure to take a look at the code and be sure that it does what you think it does. \n\n\\section{Data Types}\n\n\\subsection{The basic types}\nThe fundamental variable types in R are character, numeric, integer and factor. Factor is a bit more tricky than the other three, and will be dealt with seperately. These types are not about storage, but rather the levels of the elements in your objects.\n\n```{r, message= F, warning= F}\n# character: strings \n\"Lukas\"\n# integer: whole numbers\n1\n# numeric (known as double in other programming languages): real line\n1.2\n```\n\n\\subsection{Vectors}\nVectors are the most basic type of data storage in R. This is a one dimensional object where all the elements must be of the same type. To create a vector you use c(), which techniqually reads as concatonate but I personally refer to as combine. \n\n```{r, message= F, warning= F}\nc(\"Lukas\", \"Lars\", \"Paulina\", \"Ragna\", \"Thomas\")\n```\n\nThis is a vector of characters. If I throw in a number in the c() call, it would implicitly be converted to character. R does this conversion to the \"lower\" format automatically as you can't convert Lukas to a number but you can convert a number to a character. \n\nThe dimension of a vector is referred to as $length()$, which is the number of elements in the vector.\n\n```{r, message= F, warning= F}\nlength(c(\"Lukas\", \"Lars\", \"Paulina\", \"Ragna\", \"Thomas\"))\n```\n\nYou subset this dimension using one value within [] following the vector object. Say that I want to extract the 4th element (note that indexing in R begins at 1, so the first position is 1) I would do it as\n\n```{r, message= F, warning= F}\nc(\"Lukas\", \"Lars\", \"Paulina\", \"Ragna\", \"Thomas\")[4]\n```\n\nIf you want to transform a vector, say multiply all elements by 5, you do it as follows\n```{r, message= F, warning= F}\nc(3, 5, 2) * 10\n```\n\nQuicktip: if you want to create a vector of values in succession, say 1 to 10, you can use ':'\n\n```{r, message= F, warning= F}\nc(1,2,3,4,5,6,7,8,9,10)\n1:10\n```\n\n\\subsection{Matricies}\nA matrix has two dimensions with elements of all the same types. The dimensions are columns and rows, and in subsetting you need to specify both as $[row id, column id]$. If you leave an entry blank R will get all rows or columns. Also you can supply the indexing operators with vectors. Lets take a quick look.\n\n```{r, message= F, warning= F}\n(mat <- matrix(c(1,2,3,4,5,6), \n               nrow = 3, ncol = 2))\n# get row 2, col 2\nmat[2, 2]\n# get all rows, col 2\nmat[, 2]\n# get row 1 and 3, column 2\nmat[c(1,3), 2]\n```\n\nMultiplying a vector by a scalar works the same way as for the vector object. R will multiply all the elements of the matrix with this value\n\n\\subsection{Data Frame}\nThis is the way you store data in R. In many ways it is like a matrix, and you can subset is like a matrix using the [$row id$, $col id$] mechanism. What sets it apart from a matrix is that the columns can be of different variable type. It is like a composition of vectors, in the sense that each column is a vector and that vector must be homogenous with respect to type (character, numeric etc.) There is also the \\$ operator for subsetting. Since we've inspected the matrix indexing, lets look at the \\$.\n\n```{r, message= F, warning= F}\n(dat <- data.frame(Name = c(\"Mikaela\", \"Anders\", \"Regina\", \"Gustav\"),\n                   Age = c(24, 15, 57, 32),\n                   # ignore the parameter below\n                   stringsAsFactors = F))\n# can you see the similiraties with the matrix object?\n```\n\nHere we have created a dataframe with two variables, Name and Age, which are of two different types. You can subset the $dat$ object using the variable names as follows\n\n```{r, message= F, warning= F}\ndat$Name\ndat$Age\n```\n\n\\subsection{Factors}\nFactors are the best way to store a nominal variable in R. The factor stores the nominal values as a vector of integers in the range $\\{1, \\; ...\\; , k \\}$ where k are the number of unique values. Then you have the levels of the factor, which is a vector of character strings mapped to these integers. It might seem a hassle to store what could easily be represented as characters as something this complicated, but other functions in R has unique interactions with factors. For example, plotting becomes more intuitive if you store a factor as a factor, rather than a character. A more formal presentation of the factor type variable will be presented in the Vote assignment in B4.\n\n```{r, message= F, warning= F}\n# create character vector of names\n(names <- as.character(c(\"Mikaela\", \"Anders\", \"Regina\", \"Gustav\", \"Anders\")))\n# 4 unique values\nunique(names)\n# convert to factor\n(names <- factor(names))\n# each unique name becomes a level of the factor\nlevels(names)\n```\n\nNote that R has ordered the levels in the way they first appear in the character vector. You can specify the levels yourselves in the factor creation. After the factor has been created however, changing the levels becomes more tricky as the the labels are mapped to integers, and changing the mapping changes the values as you see them. Lets to the process again, but I would like to specify the order of levels alphabetically. \n\n```{r, message= F, warning= F}\n(names <- as.character(c(\"Mikaela\", \"Anders\", \"Regina\", \"Gustav\", \"Anders\")))\n(names <- factor(names, levels = c(\"Anders\", \"Gustav\", \"Mikaela\", \"Regina\")))\n```\n\n\\section{Subsetting}\n\nOne of the more tedious tasks, at least when getting to know R, is subsetting. There is an extremely popular package called 'dplyr' which is made for easier data wrangling (data manipulation) but this package is outside the scope of any of the B-level courses. Instead we will in large focus on using the which() command. \n\n\\subsection{Which()}\nWhich() takes a object of booleans (TRUE & FALSE) and gives the positions of TRUE. Basically you supply which with some logical statement and you will get the positions of where this is fulfilled. Let's look at an example with a vector of colours. Say that you want to get the position of \"red\".\n\n\\vspace{3mm}\n\n```{r, message= F, warning= F}\ncolour <- c(\"red\", \"blue\", \"blue\", \"red\", \"green\", \"white\", \"blue\")\ncolour == \"red\"\n```\n\nUsing == on the vector starts a iterative process where R loops through all the elements of the colour vector and checks whether they are red or not, and returns a vector of TRUE and FALSE. If you supply which() with this vector it will give you back a vector of the positions of TRUE.\n\n\\vspace{3mm}\n\n```{r, message= F, warning= F}\nwhich(colour == \"red\")\n```\n\nThis vector of values is something you can easily use to subset the vector.\n\n```{r, message= F, warning= F}\ncolour[which(colour == \"red\")]\n```\n\nIt might seem hard to grasp the usefuleness in this example, but let's apply this on a data frame instead. Let's take a look at the well known flower iris data set to get a sense of how you can use the which() command. This dataset comes with the base package $datasets$, you can see  what other datasets are available using the command $library(help = \"datasets\")$.\n\n```{r, message= F, warning= F}\nstr(iris)\n```\n\nIf I asked you to give me the mean sepal width of setosa, how would you go about this? Using the which() command, we can start by extracting the row positions of setosa. And remember that we can use \\$ to subset a data frame by variable (column) names.\n\n```{r, message= F, warning= F}\nwhich(iris$Species == \"setosa\")\n```\n\nThis vector contains the positions of setosa. From here on out there are many ways to go about getting the mean of sepal width. I'd prefer not to save the vector as a new object in the environment (as it quickly gets cluttered up with stuff) but you can ofcourse do that. This is how I would go about getting the mean.\n\n```{r, message= F, warning= F}\nmean(iris$Sepal.Width[which(iris$Species == \"setosa\")])\n```\n\nSo first, $iris\\$Sepal.Width$ extracts the sepal width column from the iris dataframe. This object is a vector. \n\n```{r, message= F, warning= F}\nis.vector(iris$Sepal.Width)\n```\nWhen you want to use the square brackets for subsetting you therefore only supply one dimension to subset based on (since a vector only has length, whilst a matrix has columns and rows). So in the square brackets you supply the vector of positions where Species == \"setosa\". \n\n\nNote that there are many logical operators, apart from '=='. Examples are <, >, <=, >=, != etc. \n\n\\subsection{Sidenote: multiple logical conditions.}\n\nSay that you wanted to get the mean of sepal width for both virginica and setosa, how could you go about that? Well, since you have three types of species you could simple use the not equal operator and find positions of != \"versicolor\". But if there where more than three species the most efficient way would be to use multiple logical statements. For this you use |,& which are read as OR and AND respectively. Note that if you use only one symbol you will compare vectors element by element. And using double symbols (||, &&) will return a vector of length one, which means that it is used when comparing two or more length one vectors. Lets look at all four ways and try to figure out which one is the correct\n\n```{r, message= F, warning= F}\nwhich(iris$Species == \"setosa\" & iris$Species == \"virginica\")\nwhich(iris$Species == \"setosa\" && iris$Species == \"virginica\")\nwhich(iris$Species == \"setosa\" | iris$Species == \"virginica\")\nwhich(iris$Species == \"setosa\" || iris$Species == \"virginica\")\n```\n\nWell, for starters, using the double versions is not correct. I want a vector returned where checks has been made element wise. Secondly & is not correct. It will never evaluate to true as no entry can be both setosa and virginica. So | is correct. Just to give you an idea of how || is used, you can use it within a for loop to get the same result\n\n```{r, message= F, warning= F}\nvec <- NULL\nfor(i in 1:nrow(iris)){\n  if((iris$Species[i] == \"setosa\") || (iris$Species[i] == \"virginica\") == TRUE){\n    vec[i] <- TRUE\n  } else {\n    vec[i] <- FALSE\n  }\n}\n\nwhich(vec)\n```\n\nUsing the | and & can be treacherous as it won't throw an error if the vectors are of unequal length. If you think you are comparing two vectors of equal length, but one is 2 elements less, it will cycle through the first two values of the smaller vector, comparing it to the last two of the larger.\n\n\\subsection{unique()}\nAlthough not only useful in the context of subsetting I will present this function for usage in this context. Let's say that you are uncertain of all the different types of species in the iris dataset. How would you go about inspecting the unique values? \n\n```{r, message= F, warning= F}\nunique(iris$Species)\n```\n\nSo, three types! You can use this if you feel uncertain about the spelling of a level of the factor. \n\n```{r, message= F, warning= F}\nwhich(iris$Species == unique(iris$Species)[1])\n# equivalent to:\n# which(iris$Species == setosa)\n```\n\nDo not use the unique() command on numeric and integer vectors with many values, it will not return anything useful. Generally it will return as many values as there are elements in the vector.\n\n\\subsection{Column Names and Positions}\nOne common act in the beginning of your R careers is to look at the dataset in the global environment and to check for a variable name or to, as I often did, count which position a variable name has. As you might recall you can use the square brackets to subset a dataframe the same way you would a matrix, [$row index$, $column index$].\n\nThe colnames() function returns the variable names of a dataframe. \n\n```{r, message= F, warning= F}\ncolnames(iris)\n```\n\nYou can use this to subset the dataframe should you want. Say that you want the third element of columnnames\n\n```{r, message= F, warning= F}\niris[, colnames(iris)[3]]\n```\n\nTechniqually I'm counting at the moment, but it's much easier to look at the vector of column names rather than opening the data into the reader or looking in the global environment. You want to spend as little time as possible doing manual tasks! \n\n\n\\section{Working with Data}\n\n\\subsection{The .csv Format}\n\nOfcourse excel files are used but it in general it surpassed vastly in usage by the .csv format. For example, data from SQL databases will often be saved to the .csv format. Csv stands for comma seperated value. These files are text files where the data points are most often seperated by commas (but often other symbols, such as tab and whitespace) and a new observation is assumed to be given by a new line. \n\n\\subsection{read.csv()}\nThe most commonly used function for reading in .csv data files is the read.csv() function. In my working directory I have a text file named $japanese_emmigration.txt$ which contains data on japenese emmigration during the 20th century. Let's try loading the data using all the default settings of the read.csv() function and see what happens\n\n```{r, message= F, warning= F}\n(dat <- read.csv(\"japanese_emmigration.txt\"))\n# 45 rows, 1 column\nnrow(dat);ncol(dat)\n```\n\nThat does not look right at all! Using the default settings of read.csv() means that R is looking for ',' as value seperator, but my data has ';' as value seperator. It still has new line as seperator between observations. The results is that my data import gives me 45 observations of only one variable, which is a string containing all 7 variables in my data. Lets try this again, but manually specifying the seperator as ';'.\n\n```{r, message= F, warning= F}\n(dat <- read.csv(\"japanese_emmigration.txt\", sep = \";\"))\n# 45 rows, 7 columns\nnrow(dat);ncol(dat)\n```\n\nIn general, I recommend that you open the file in your operating systems default text editor and look at what character is seperating the values. Note that if it is tab seperated you use '\\\\t' to represent it!\n\nNote that read.csv creates a dataframe in the global environment. On a side note, you could see the dataframe as a dynamic matrix of sorts. Matricies in R needs to contain the same type of objects in all positions (character, numeric etc.) whilst a data frame can have different type of objects in the column. The dataframe can be said to be homogenous with respect to the columns.\n\n```{r, message= F, warning= F}\nis.data.frame(dat)\n```\n\n\\subsection{Variable Names}\n\nThe variable names of my data is not informative to anyone else but me however. This is something you should fix directly! This is easily done using the colnames() function. Simply assign a vector of characters, the same length as the number of columns of the data frame, to the colnames() of the dataframe.\n\n```{r, message= F, warning= F}\n(colnames(dat) <- c(\"prefecture\",\"emigrants\",\"cultivated\",\"farmland\",\n                    \"arable\",\"labors\",\"pioneer\"))\n```\n\n\\subsection{str() \\& summary()}\n\nThe str() function, standing for structure, is a good first step after you have imported the data to your satisfaction. This gives you a overview of your data.\n\n```{r, message= F, warning= F}\nstr(dat)\n```\n\nThey way I mainly use this function is to get a sense of whether all the variables has been interpreted correctly by R. For example, could pioneer by stored in a different manner than as an integer? How many unique values does that variable have?\n\n```{r, message= F, warning= F}\nunique(dat$pioneer)\n```\n\nSo it is a binary variable. Perhaps it could better be stored as a factor? This would at least give more interpretable plots later. \n\n```{r, message= F, warning= F}\ndat$pioneer <- as.factor(dat$pioneer)\nlevels(dat$pioneer) <- c(\"No pioneer\", \"Pioneer\")\nstr(dat); dat$pioneer\n```\n\nAnother reason for creating this factor with more informative values than 0 and 1 is that you don't forget what 0 and 1 stands for!",
    "created" : 1515059559651.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2655483310",
    "id" : "61F5A516",
    "lastKnownWriteTime" : 1515158462,
    "last_content_update" : 1515158462857,
    "path" : "C:/Users/lukas/Desktop/B2/B-courses_R/Reworked/Other Help/HelpDoc/help.Rmd",
    "project_path" : "help.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}